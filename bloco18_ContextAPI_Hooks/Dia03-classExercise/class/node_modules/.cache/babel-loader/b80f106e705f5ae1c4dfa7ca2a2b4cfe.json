{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nfunction useTimer() {\n  _s();\n\n  const [counter, setCounter] = useState(0);\n  const [random, setRandon] = useState(null);\n  const min = 1;\n  const max = 100;\n  const onSec = 1000;\n  const ten = 10;\n  useEffect(() => {\n    const timerInterval = setInterval(() => {\n      const newCounter = counter + 1;\n      const tenSec = newCounter > 0 && newCounter % 10;\n\n      if (tenSec === 0) {\n        setRandon(Math.round(Math.random() * (max - min) + min));\n      }\n    }, onSec);\n    return () => {\n      clearInterval(timerInterval);\n    };\n  }, [counter]);\n}\n\n_s(useTimer, \"PyEPJMl0WRxyssXefXhxwn0J0XY=\");\n\nexport default useTimer;","map":{"version":3,"sources":["/Users/eduardoseije/Desktop/TRYBE/trybe-exercises/bloco18_ContextAPI_Hooks/Dia03-classExercise/class/src/components/Timer.jsx"],"names":["useState","useEffect","useTimer","counter","setCounter","random","setRandon","min","max","onSec","ten","timerInterval","setInterval","newCounter","tenSec","Math","round","clearInterval"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AACpB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,IAAD,CAApC;AACA,QAAMO,GAAG,GAAG,CAAZ;AACA,QAAMC,GAAG,GAAG,GAAZ;AACA,QAAMC,KAAK,GAAG,IAAd;AACA,QAAMC,GAAG,GAAG,EAAZ;AAGAT,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,aAAa,GAAGC,WAAW,CAAC,MAAM;AACpC,YAAMC,UAAU,GAAGV,OAAO,GAAG,CAA7B;AACA,YAAMW,MAAM,GAAGD,UAAU,GAAG,CAAb,IAAkBA,UAAU,GAAG,EAA9C;;AACA,UAAIC,MAAM,KAAK,CAAf,EAAkB;AACdR,QAAAA,SAAS,CAACS,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACV,MAAL,MAAiBG,GAAG,GAAGD,GAAvB,IAA8BA,GAAzC,CAAD,CAAT;AACH;AACJ,KANgC,EAM9BE,KAN8B,CAAjC;AAOA,WAAO,MAAM;AACTQ,MAAAA,aAAa,CAACN,aAAD,CAAb;AACH,KAFD;AAGH,GAXQ,EAWN,CAACR,OAAD,CAXM,CAAT;AAYC;;GArBQD,Q;;AAuBT,eAAeA,QAAf","sourcesContent":["import {useState, useEffect} from 'react';\n\nfunction useTimer() {\nconst [counter, setCounter] = useState(0);\nconst [random, setRandon] = useState(null);\nconst min = 1;\nconst max = 100;\nconst onSec = 1000;\nconst ten = 10;\n\n\nuseEffect(() => {\n    const timerInterval = setInterval(() => {\n        const newCounter = counter + 1;\n        const tenSec = newCounter > 0 && newCounter % 10;\n        if (tenSec === 0) {\n            setRandon(Math.round(Math.random() * (max - min) + min))\n        }\n    }, onSec);\n    return () => {\n        clearInterval(timerInterval);\n    };\n}, [counter]);\n}\n\nexport default useTimer;\n"]},"metadata":{},"sourceType":"module"}